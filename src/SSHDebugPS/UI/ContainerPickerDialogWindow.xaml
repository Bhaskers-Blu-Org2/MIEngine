<!--
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-->
<ui:DialogWindow x:Class="Microsoft.SSHDebugPS.UI.ContainerPickerDialogWindow"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:ui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
                 xmlns:vsimaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
                 xmlns:catalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
                 xmlns:local="clr-namespace:Microsoft.SSHDebugPS"
                 xmlns:docker="clr-namespace:Microsoft.SSHDebugPS.Docker"
                 MinWidth="450"
                 MinHeight="500"
                 Width="450"
                 Height="535"
                 ShowInTaskbar="False"
                 Name="ContainerPickerDialog"
                 FontFamily="{DynamicResource VsFont.EnvironmentFontFamily}"
                 FontSize="{DynamicResource VsFont.EnvironmentFontSize}"
                 Title="{x:Static local:UIResources.DialogTitle}"
                 WindowStartupLocation="CenterOwner"
                 KeyDown="DialogWindow_KeyDown"
                 DataContext="{Binding RelativeSource={x:Static RelativeSource.Self},Path=Model}">
    <ui:DialogWindow.Resources>
        <!-- Converters-->
        <docker:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
        <!--Styles-->
        <Style x:Key="DialogWindowStyle" TargetType="{x:Type Window}">
            <Setter Property="FontFamily"
                    Value="{DynamicResource VsFont.EnvironmentFontFamily}" />
            <Setter Property="FontSize"
                    Value="{DynamicResource VsFont.EnvironmentFontSize}" />
            <Setter Property="BorderBrush"
                    Value="Transparent" />
        </Style>
        <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
            <Setter Property="Background" Value="{DynamicResource SystemColors.WindowBrush}" />
            <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter Property="VerticalScrollBarVisibility" Value="Visible" />
        </Style>
        <Style x:Key="SelectedLabelStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>
        <Style x:Key="SelectedTextBlockStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>
        <Style x:Key="ItemHeaderStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="Normal"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsSelected, Mode=TwoWay}" Value="True">
                    <Setter Property="FontWeight" Value="Bold" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <!-- ListBoxItem Styles-->
        <Style x:Key="ListBoxItemFocusVisualStyle" TargetType="{x:Type Control}">
            <Setter Property="BorderBrush" Value="Transparent" />
        </Style>
        <Style x:Key="ListBoxStyle" TargetType="{x:Type ListBox}">
            <EventSetter Event="GotKeyboardFocus" Handler="ListBox_GotKeyboardFocus" />
            <Setter Property="ItemTemplate" Value="{DynamicResource instanceLayout}"></Setter>
            <Setter Property="IsSynchronizedWithCurrentItem" Value="True"></Setter>
            <Setter Property="BorderThickness" Value="0"></Setter>
            <Setter Property="Padding" Value="0"></Setter>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"></Setter>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"></Setter>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <DockPanel IsItemsHost="True" LastChildFill="False" />
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Items.Count, Mode=OneWay}" Value="0">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <TextBlock x:Uid="uidNoContainersFoundTextBlock" HorizontalAlignment="Center">No Containers Found</TextBlock>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ListBoxContainerStyle" TargetType="{x:Type ListBoxItem}">
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="true">
                    <Setter Property="BorderThickness" Value="1"/>
                </Trigger>
            </Style.Triggers>

            <Setter Property="AutomationProperties.Name" Value="{Binding MachineNameAndAddress, Mode=OneWay}"/>
            <Setter Property="AutomationProperties.HelpText" Value="{Binding HelpText, Mode=OneWay}"/>
            <Setter Property="DockPanel.Dock" Value="Top"/>
            <Setter Property="BorderBrush" Value="LightSteelBlue"></Setter>
            <Setter Property="BorderThickness" Value="0"></Setter>
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"></Setter>
            <Setter Property="FocusVisualStyle" Value="{StaticResource ListBoxItemFocusVisualStyle}"></Setter>
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}" />
        </Style>
        <DataTemplate x:Key="instanceLayout" DataType="DockerContainerInstance">
            <Grid Margin="7,7,7,12">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                </Grid.ColumnDefinitions>

                <AdornerDecorator Grid.Row="0" VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock x:Uid="uidName" Text="Name: " Style="{StaticResource ItemHeaderStyle}"/>
                        <TextBlock Text="{Binding Name}" x:Uid="uidContainerName"  Style="{StaticResource ItemHeaderStyle}" Tag="0" ToolTip="{Binding Name}"/>
                    </StackPanel>
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="1" VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal" Visibility="{Binding AddressIsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                        <TextBlock x:Uid="uidContainerId" Text="Container ID: " Style="{StaticResource ItemHeaderStyle}"/>
                        <TextBlock Text="{Binding ContainerId}"  Style="{StaticResource ItemHeaderStyle}" Tag="1" ToolTip="{Binding ContainerId}"/>
                    </StackPanel>
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="2" VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal" Visibility="{Binding IsSelected, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                        <TextBlock x:Uid="uidImage" Text="Image: " Style="{StaticResource SelectedLabelStyle}" />
                        <TextBlock Text="{Binding Image}" Style="{StaticResource SelectedTextBlockStyle}" Tag="2" ToolTip="{Binding Image}"/>
                    </StackPanel>
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="3" VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal" Visibility="{Binding IsSelected, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                        <TextBlock x:Uid="uidCommand" Text="Command: " Style="{StaticResource SelectedLabelStyle}" />
                        <TextBlock Text="{Binding Command}" Style="{StaticResource SelectedTextBlockStyle}" Tag="3" ToolTip="{Binding Command}"/>
                    </StackPanel>
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="4" VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal" Visibility="{Binding IsSelected, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                        <TextBlock x:Uid="uidStatus" Text="Status: " Style="{StaticResource SelectedLabelStyle}" />
                        <TextBlock Text="{Binding Status}" Style="{StaticResource SelectedTextBlockStyle}" Tag="4" ToolTip="{Binding Status}"/>
                    </StackPanel>
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="5" VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal" Visibility="{Binding IsSelected, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                        <TextBlock x:Uid="uidCreated" Text="Created: " Style="{StaticResource SelectedLabelStyle}" />
                        <TextBlock Text="{Binding Created}" Style="{StaticResource SelectedTextBlockStyle}" Tag="5" ToolTip="{Binding Created}"/>
                    </StackPanel>
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="6" VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal" Visibility="{Binding IsSelected, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}" CanHorizontallyScroll="True">
                        <TextBlock x:Uid="uidPorts" Text="Ports: " Style="{StaticResource SelectedLabelStyle}" />
                        <TextBlock Text="{Binding FormattedListOfPorts}" Style="{StaticResource SelectedTextBlockStyle}" Tag="6" ToolTip="{Binding FormattedListOfPorts}"/>
                    </StackPanel>
                </AdornerDecorator>
            </Grid>
        </DataTemplate>
    </ui:DialogWindow.Resources>

    <!-- Main layout grid -->
    <Grid Margin="12">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>

        <!--Connection Type Picker-->
        <Label Grid.Row="0"
               x:Uid="uidConnectionTypeLabel"
               x:Name="ConnectionTypeLabel"
               Target="{Binding ElementName=ConnectionTypeComboBox}"
               Margin="-2 -2 0 -2">_Connection Type:</Label>
        
        <ComboBox x:Uid="uidConnectionTypeComboBox"
                  x:Name="ConnectionTypeComboBox"
                  AutomationProperties.LabeledBy="{Binding ElementName=ConnectionTypeLabel}"
                  Grid.Row="1"
                  Grid.Column="0"
                  ItemsSource="{Binding SupportedConnections}"
                  SelectedItem="{Binding SelectedConnection}"
                  DisplayMemberPath="DisplayName"
                  IsEnabled="{Binding AllowRefresh}"/>
        <Button x:Uid="uidAddConnection"
                x:Name="AddConnection"
                AutomationProperties.Name="Add New Connection"
                Margin="5,0,0,0"
                Grid.Row="1"
                Grid.Column="1"
                Command="{Binding AddSSHConnectionCommand}">
            <vsimaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.Add}"
                                  Width="16"
                                  Height="16">
                <Image.ToolTip>
                    <TextBlock Text="Add New Connection" />
                </Image.ToolTip>
            </vsimaging:CrispImage>
        </Button>

        <!-- Refresh button and count-->
        <StackPanel Orientation="Horizontal" Grid.Row="2" VerticalAlignment="Center" Margin="0,10,0,10">
            <TextBlock x:Uid="uidStatusLabel" Text="{ Binding StatusText, Mode=OneWay}" />

            <Button x:Uid="uidRefreshButton"
                AutomationProperties.Name="Refresh"
                Margin="10,0,0,0"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Height="20"
                Width="20"
                Click="Refresh_Click"
                IsEnabled="{Binding AllowRefresh}">
                <vsimaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.Refresh}"
                                  Width="16"
                                  Height="16">
                    <Image.ToolTip>
                        <TextBlock Text="Refresh" />
                    </Image.ToolTip>
                </vsimaging:CrispImage>
            </Button>
        </StackPanel>


        <!-- Docker Instance display-->
        <ScrollViewer AutomationProperties.Name="ConnectionScrollViewer"
                      Style="{StaticResource ScrollViewerStyle}"
                      Grid.Row="4"
                      Grid.ColumnSpan="2">
            <Grid Grid.Row="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <ListBox x:Name="ContainerListBox"
                         AutomationProperties.AutomationId="aidContainerListBox"
                         ItemsSource="{Binding Path=DockerContainers, Mode=OneWay }"
                         SelectedValue="{Binding SelectedDockerInstance}"
                         ItemContainerStyle="{StaticResource ListBoxContainerStyle}"
                         GotKeyboardFocus="ContainerListBox_GotKeyboardFocus"
                         Style="{StaticResource ListBoxStyle}" />
            </Grid>
        </ScrollViewer>

        <!-- OK / Cancel buttons -->
        <StackPanel Grid.Row="5"
                    Grid.ColumnSpan="2"
                    Margin="4"
                    Orientation="Horizontal"
                    HorizontalAlignment="Right">

            <Button x:Uid="uidOkayButton" x:Name="OkayButton"
                    Margin="4"
                    Height="23"
                    MinWidth="75"
                    IsDefault="True"
                    Click="OkButton_Click"
                    CommandParameter="{Binding ElementName=ContainerPickerDialog}"
                    Content="OK" />

            <Button x:Uid="uidCancelButton" x:Name="CancelButton"
                    Height="23"
                    MinWidth="75"
                    IsCancel="True"
                    Click="CancelButton_Click"
                    CommandParameter="{Binding ElementName=ContainerPickerDialog}"
                    Content="Cancel" />
        </StackPanel>
    </Grid>
</ui:DialogWindow>
