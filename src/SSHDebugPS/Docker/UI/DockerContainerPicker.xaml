<!--
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-->
<ui:DialogWindow x:Class="Microsoft.SSHDebugPS.Docker.DockerContainerPickerWindow"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:ui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.14.0"
                 xmlns:vsimaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
                 xmlns:vsimagecatalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
                 xmlns:local="clr-namespace:Microsoft.SSHDebugPS.Docker"
                 MinWidth="450"
                 MinHeight="500"
                 Width="450"
                 Height="535"
                 ShowInTaskbar="False"
                 FontFamily="{DynamicResource VsFont.EnvironmentFontFamily}"
                 FontSize="{DynamicResource VsFont.EnvironmentFontSize}"
                 Title="{x:Static local:UIResources.DialogTitle}"
                 WindowStartupLocation="CenterOwner">
    <ui:DialogWindow.Resources>
        <Style x:Key="DialogWindowStyle"
               TargetType="{x:Type Window}">
            <Setter x:Uid="uidRemoteDiscoveryDialogTitle"
                    Property="Title"
                    Value="Docker Connections"
                    Localization.Attributes="Value(Readable Modifiable Text)" />
            <!--<Setter Property="Width" Value="450" />
            <Setter Property="MinWidth" Value="450" />
            <Setter Property="Height" Value="535" />
            <Setter Property="MinHeight" Value="500" />-->
            <!--<Setter Property="FontFamily" Value="{DynamicResource VsFont.EnvironmentFontFamily}" />
            <Setter Property="FontSize" Value="{DynamicResource VsFont.EnvironmentFontSize}" />-->
            <Setter Property="BorderBrush"
                    Value="Transparent" />
        </Style>
        <DataTemplate x:Key="AuthModeListTemplate">
            <TextBlock Text="{Binding Path=Name}" />
        </DataTemplate>
        <!-- Converters-->
        <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
        <!-- Images -->
        <!--<BitmapSource x:Key="WarningImageSource">pack://application:,,,/VsDebugPresentationPackage;component/dialogs/remotediscovery/images/Warning.png</BitmapSource>
        <BitmapSource x:Key="RefreshImageSource">pack://application:,,,/VsDebugPresentationPackage;component/dialogs/remotediscovery/images/Refresh.png</BitmapSource>-->
        <Style x:Key="ExpanderStyle"
               TargetType="{x:Type Expander}">
            <Setter Property="Background"
                    Value="Transparent" />
            <Setter Property="Margin"
                    Value="0,12,0,0" />
            <Setter Property="BorderThickness"
                    Value="0,1,0,0" />
            <Setter Property="BorderBrush"
                    Value="LightGray"></Setter>
        </Style>
        <Style x:Key="ScrollViewerStyle"
               TargetType="{x:Type ScrollViewer}">
            <Setter Property="Background"
                    Value="{DynamicResource SystemColors.WindowBrush}" />
            <Setter Property="HorizontalScrollBarVisibility"
                    Value="Disabled" />
            <Setter Property="VerticalScrollBarVisibility"
                    Value="Visible" />
        </Style>
        <Style x:Key="ConfigureConnectionHyperLinkStyle"
               TargetType="{x:Type Hyperlink}">
            <!--<EventSetter Event="Click" Handler="ConfigureManualConnection_Click"></EventSetter>-->
        </Style>
        <!-- ListBoxItem Styles-->
        <Style x:Key="ListBoxItemFocusVisualStyle"
               TargetType="{x:Type Control}">
            <Setter Property="BorderBrush"
                    Value="Transparent" />
        </Style>
        <Style x:Key="ListBoxStyle"
               TargetType="{x:Type ListBox}">
            <!--<EventSetter Event="GotKeyboardFocus" Handler="ListBox_GotKeyboardFocus" />-->
            <Setter Property="ItemTemplate"
                    Value="{DynamicResource instanceLayout}" />
            <Setter Property="IsSynchronizedWithCurrentItem"
                    Value="True" />
            <Setter Property="BorderThickness"
                    Value="0" />
            <Setter Property="Padding"
                    Value="0" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                    Value="Disabled" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                    Value="Hidden" />
            <Setter Property="Focusable"
                    Value="False" />
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <DockPanel IsItemsHost="True"
                                   LastChildFill="False" />
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Items.Count, Mode=OneWay}"
                             Value="0">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>

                                    <TextBlock x:Uid="uidNoConnectionsFoundTextBlock"
                                               Grid.Row="0"
                                               HorizontalAlignment="Center">No Docker containers found</TextBlock>
                                    <TextBlock Grid.Row="1"
                                               HorizontalAlignment="Center"
                                               Visibility="{ Binding IsManualConnectionsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay }">
                                        <Hyperlink Style="{DynamicResource ConfigureConnectionHyperLinkStyle}">
                                            <TextBlock x:Uid="uidConfigureManualConnectionTextBlock">Configure a connection manually</TextBlock>
                                        </Hyperlink>
                                    </TextBlock>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ListBoxContainerStyle"
               TargetType="{x:Type ListBoxItem}">
            <Style.Triggers>
                <Trigger Property="IsSelected"
                         Value="true">
                    <Setter Property="BorderThickness"
                            Value="1" />
                </Trigger>
            </Style.Triggers>

            <Setter Property="AutomationProperties.Name"
                    Value="{Binding MachineNameAndAddress, Mode=OneWay}" />
            <Setter Property="AutomationProperties.HelpText"
                    Value="{Binding HelpText, Mode=OneWay}" />
            <Setter Property="DockPanel.Dock"
                    Value="Top" />
            <Setter Property="BorderBrush"
                    Value="LightSteelBlue"></Setter>
            <Setter Property="BorderThickness"
                    Value="0"></Setter>
            <Setter Property="IsSelected"
                    Value="{Binding IsSelected, Mode=TwoWay}"></Setter>
            <Setter Property="FocusVisualStyle"
                    Value="{StaticResource ListBoxItemFocusVisualStyle}"></Setter>
            <Setter Property="HorizontalContentAlignment"
                    Value="Stretch" />
            <Setter Property="Visibility"
                    Value="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}" />
        </Style>
        <!-- Item Styles-->
        <Style x:Key="ItemHeaderStyle"
               TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment"
                    Value="Center" />
            <Setter Property="FontWeight"
                    Value="Normal" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsSelected, Mode=TwoWay}"
                             Value="True">
                    <Setter Property="FontWeight"
                            Value="Bold" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="SelectedLabelStyle"
               TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment"
                    Value="Center" />
        </Style>
        <Style x:Key="SelectedTextBlockStyle"
               TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment"
                    Value="Center" />
        </Style>
        <Style x:Key="WarningBorderStyle"
               TargetType="{x:Type Border}">
            <Setter Property="Width"
                    Value="Auto" />
            <Setter Property="BorderBrush"
                    Value="LightGray" />
            <Setter Property="BorderThickness"
                    Value="1" />
            <Setter Property="Margin"
                    Value="0 5 0 0" />
            <Setter Property="Visibility"
                    Value="{Binding ShowWarning, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}" />
        </Style>
        <Style x:Key="WarningTextBlockStyle"
               TargetType="{x:Type TextBlock}">
            <Setter Property="TextWrapping"
                    Value="Wrap" />
            <Setter Property="Margin"
                    Value="10 0 0 0" />
        </Style>
        <DataTemplate x:Key="instanceLayout"
                      DataType="DockerContainerInstance">
            <Grid Margin="7,7,7,12">
                <Grid.RowDefinitions>
                    <RowDefinition Height="25"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                </Grid.ColumnDefinitions>

                <!--<AdornerDecorator Grid.Row="0" VerticalAlignment="Center">
                    <TextBlock Text="{Binding MachineNameAndAddress, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource ItemHeaderStyle}"
                        x:Uid="uidMachineNameLabel"
                        Tag="0"
                        local:RemoteInstance.SourceRemoteInstance="{Binding Self}"/>
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="1" VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal" Visibility="{Binding AddressIsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                        <TextBlock x:Uid="uidFullAddressLabel" Text="Address:" Style="{StaticResource SelectedLabelStyle}" />
                        <TextBlock Text="{Binding FullAddress, Mode=OneTime}" Style="{StaticResource SelectedTextBlockStyle}"
                            Tag="1"
                            local:RemoteInstance.SourceRemoteInstance="{Binding Self}"/>
                    </StackPanel>
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="2" VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal" Visibility="{Binding AuthModeIsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                        <TextBlock x:Uid="uidAuthModeLabel" Text="Authentication:" Style="{StaticResource SelectedLabelStyle}" />
                        <TextBlock Text="{Binding AuthMode.Name, Mode=OneTime}" Style="{StaticResource SelectedTextBlockStyle}"
                            Tag="2"
                            local:RemoteInstance.SourceRemoteInstance="{Binding Self}"/>
                    </StackPanel>
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="4" VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal" Visibility="{Binding ArchitectureIsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                        <TextBlock x:Uid="uidArchitectureLabel" Text="Architecture:" Style="{StaticResource SelectedLabelStyle}" />
                        <TextBlock Text="{Binding Architecture, Mode=OneTime}" Style="{StaticResource SelectedTextBlockStyle}"
                            Tag="3"
                            local:RemoteInstance.SourceRemoteInstance="{Binding Self}"/>
                    </StackPanel>
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="5" VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal" Visibility="{Binding IsSelected, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                        <TextBlock x:Uid="uidWindowsVersionLabel" Text="Windows Version:" Style="{StaticResource SelectedLabelStyle}" />
                        <TextBlock Text="{Binding WindowsVersion, Mode=OneTime}" Style="{StaticResource SelectedTextBlockStyle}"
                      Tag="4"
                      local:RemoteInstance.SourceRemoteInstance="{Binding Self}"/>
                    </StackPanel>
                </AdornerDecorator>-->

                <StackPanel Grid.Row="6"
                            Orientation="Horizontal"
                            Visibility="{Binding IsSelected, Converter={StaticResource BoolToVisibilityConverter}}">
                    <TextBlock x:Uid="uidDeveloperLicenseLabel"
                               Text="Developer License:"
                               Style="{StaticResource SelectedLabelStyle}" />
                    <TextBlock Text="{Binding DeveloperLicenseDescription, Mode=OneTime}"
                               Style="{StaticResource SelectedTextBlockStyle}" />
                </StackPanel>

                <Border Grid.Row="7"
                        Style="{StaticResource WarningBorderStyle}">
                    <Grid Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                            <ColumnDefinition Width="*"></ColumnDefinition>
                        </Grid.ColumnDefinitions>

                        <!--<Image  Grid.Column="0" 
                                Source="{StaticResource WarningImageSource}" 
                                HorizontalAlignment="Left" 
                                Height="16" 
                                Width="16" 
                                VerticalAlignment="Top">
                        </Image>-->

                        <TextBlock Grid.Column="1"
                                   Text="{Binding Warning, Mode=OneTime}"
                                   Style="{StaticResource WarningTextBlockStyle}"
                                   x:Uid="uidWarningLabel" />
                    </Grid>
                </Border>
                <Button Grid.Row="7"
                        x:Name="_btnOk"
                        x:Uid="uidInstanceSelectButton"
                        Content="Select"
                        Height="23"
                        Width="75"
                        VerticalAlignment="Bottom"
                        HorizontalAlignment="Right"
                        VerticalContentAlignment="Center"
                        Visibility="{Binding IsSelected, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}" />
                <!--Click="_btnSelect_Click"-->
            </Grid>
        </DataTemplate>
    </ui:DialogWindow.Resources>

    <!--<ui:dialogwindow.commandbindings>
        <commandbinding command="{staticresource manualselectioncmd}"
                        executed="manualselectioncmd_executed"
                        canexecute="manualselectioncmd_canexecute"/>
    </ui:dialogwindow.commandbindings>-->

    <Grid Margin="12">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="45" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <Border x:Uid="uidsearchControlParent"
                x:Name="_searchControlParent"
                Grid.Row="0"
                Width="Auto"
                SnapsToDevicePixels="true" />

        <TextBlock Margin="0,12,0,0"
                   Grid.Row="1"
                   HorizontalAlignment="Left"
                   VerticalAlignment="Center"
                   Text="{ Binding StatusText, Mode=OneWay}" />

        <Button x:Uid="uidRefreshButton"
                AutomationProperties.Name="Refresh"
                Margin="0,12,0,0"
                Grid.Row="1"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Height="20"
                Width="20"
                Command="{Binding RefreshCommand, Mode=OneWay}">
            <!--<Button.Content>
                <Image  Source="{StaticResource RefreshImageSource}" 
                        Height="16" 
                        Width="16" 
                        HorizontalAlignment="Center" 
                        VerticalAlignment="Center">
                </Image>
            </Button.Content>-->
            <Button.Style>
                <Style TargetType="Button">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding SearchInProgress}"
                                     Value="True">
                            <Setter x:Uid="uidRefreshButtonSearchInProgressTrue"
                                    Property="AutomationProperties.ItemStatus"
                                    Value="in progress" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SearchInProgress}"
                                     Value="False">
                            <Setter x:Uid="uidRefreshButtonSearchInProgressFalse"
                                    Property="AutomationProperties.ItemStatus"
                                    Value="ready" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>

        <!--<TextBlock Grid.Row="2"  
                    VerticalAlignment="Center" 
                    HorizontalAlignment="Left"
                    Visibility="{ Binding IsUniversalTextVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay }"
                    Margin="0,0,0,12"
                    x:Uid="uidUniversalText" 
                    TextWrapping="Wrap"
                    Text="To attach to Universal Apps, go to the Debug/Other Windows/Debug Installed App Package dialog."/>-->

        <ScrollViewer AutomationProperties.Name="ConnectionScrollViewer"
                      Style="{StaticResource ScrollViewerStyle}"
                      Grid.Row="3">
            <Grid Grid.Row="3">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <Expander x:Uid="uidDirectConnectionsExpander"
                          Grid.Row="0"
                          Header="Direct Connection"
                          IsExpanded="True"
                          Visibility="{ Binding IsDirectConnectionsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay }"
                          ToolTip="Select from Remote direct connections">
                    <ListBox x:Name="_directConnectedListBox"
                             AutomationProperties.AutomationId="aidDirectConnectedListBox"
                             ItemsSource="{Binding Path=DirectConnectedInstances, Mode=OneWay }"
                             SelectedValue="{Binding SelectedInstance}"
                             SelectedIndex="{Binding DirectConnectSelectedIndex, Mode=OneWay }"
                             ItemContainerStyle="{StaticResource ListBoxContainerStyle}"
                             Style="{StaticResource ListBoxStyle}" />
                    <!--SelectionChanged="_listBox_SelectionChanged"-->
                </Expander>

                <Expander x:Uid="uidManualConnectionsExpander"
                          Grid.Row="1"
                          Header="Manual Configuration"
                          Padding="1"
                          IsExpanded="{ Binding IsManualConnectionsExpanded,Mode=TwoWay}"
                          Visibility="{ Binding IsManualConnectionsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay }"
                          ToolTip="Specify Remote connection settings manually">
                    <Border BorderBrush="LightSteelBlue"
                            BorderThickness="1">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0.5,0"
                                                 EndPoint="0.5,1"
                                                 Opacity="0.1">
                                <GradientStop Color="PowderBlue"
                                              Offset="0.0" />
                                <GradientStop Color="DodgerBlue"
                                              Offset="1.0" />
                            </LinearGradientBrush>
                        </Border.Background>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="5" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="5" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <TextBlock x:Name="_manualAddressTextBoxLabel"
                                       x:Uid="uidManualConnectionAddress"
                                       Grid.Row="0"
                                       Grid.Column="0"
                                       Margin="12,12,12,0"
                                       Text="Address:"
                                       Style="{StaticResource SelectedLabelStyle}" />
                            <TextBox x:Name="_manualAddressTextBox"
                                     Grid.Row="0"
                                     Grid.Column="1"
                                     Margin="12,12,12,0"
                                     AutomationProperties.LabeledBy="{Binding ElementName=_manualAddressTextBoxLabel}"
                                     Text="{Binding ManualQualifier, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                <TextBox.InputBindings>
                                    <!--<KeyBinding Key="Enter" Command="{StaticResource ManualSelectionCmd}"/>-->
                                </TextBox.InputBindings>
                            </TextBox>
                            <!--<Image x:Uid="uidManualQualifierValidationImage" Grid.Row="0" Grid.Column="0" Height="16" Width="16" Margin="6,12,0,0" VerticalAlignment="Center" HorizontalAlignment="Right"
                                   Source="{StaticResource WarningImageSource}"
                                   Visibility="{ Binding ShowManualQualifierWarning, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay }"
                                   ToolTip="The qualifier entered is invalid"/>-->

                            <TextBlock x:Name="_authModesComboBoxLabel"
                                       x:Uid="uidManualConnectionAuthMode"
                                       Grid.Row="2"
                                       Grid.Column="0"
                                       Margin="12,0"
                                       Text="Authentication Mode:"
                                       Style="{StaticResource SelectedLabelStyle}" />
                            <!--<ComboBox x:Name="_authModesComboBox" Grid.Row="2" Grid.Column="1" Margin="12,6,12,6" VerticalContentAlignment="Center"
                                      ItemsSource="{Binding AuthModes, Mode=TwoWay}"
                                      ItemTemplate="{StaticResource AuthModeListTemplate}"
                                      SelectedValue="{Binding ManualAuthMode}"
                                      IsSynchronizedWithCurrentItem="True"
                                      AutomationProperties.LabeledBy="{Binding ElementName=_authModesComboBoxLabel}"
                                      Loaded="_authModesComboBox_Loaded"
                                      DropDownOpened="_authModesComboBox_DropDownOpened"
                                      DropDownClosed="_authModesComboBox_DropDownClosed">
                                <ComboBox.Resources>
                                    -->
                            <!--<KeyBinding x:Key="_authModesComboBoxKeyBinding" Key="Enter" Command="{StaticResource ManualSelectionCmd}"/>-->
                            <!--
                                </ComboBox.Resources>
                            </ComboBox>-->
                            <!--<Button x:Uid="uidManualConnectionSelectButton"
                                    x:Name="_btnManualOk"
                                    Grid.Row="4" Grid.Column="1" Content="Select"
                                    Height="23" Width="75"
                                    HorizontalAlignment="Right"
                                    Margin="0,0,12,12"
                                    Command="{StaticResource ManualSelectionCmd}"
                                    IsEnabled="{Binding IsManualOkButtonEnabled, Mode=OneWay}" />-->
                        </Grid>
                    </Border>
                </Expander>

                <Expander x:Uid="uidNetworkConnectionsExpander"
                          Grid.Row="3"
                          Header="Auto Detected"
                          IsExpanded="{ Binding IsNetworkConnectionsExpanded,Mode=TwoWay}"
                          ToolTip="Select from Auto-Detected connections">
                    <ListBox x:Name="_networkConnectedListBox"
                             AutomationProperties.AutomationId="aidNetworkConnectionsListBox"
                             ItemsSource="{Binding Path=NetworkConnectedInstances, Mode=OneWay }"
                             SelectedValue="{Binding SelectedInstance}"
                             ItemContainerStyle="{StaticResource ListBoxContainerStyle}"
                             Style="{StaticResource ListBoxStyle}" />
                    <!--SelectionChanged="_listBox_SelectionChanged"-->
                </Expander>
            </Grid>
        </ScrollViewer>

        <TextBlock Grid.Row="4"
                   HorizontalAlignment="Left"
                   VerticalAlignment="Center"
                   Margin="0,12"
                   x:Uid="uidRemoteDebuggingAutoDetectMessage"
                   Style="{StaticResource WarningTextBlockStyle}"
                   Visibility="{ Binding IsManualConnectionsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay }"
                   Text="Not all devices can be auto detected. If you do not see a device you are expecting directly enter the IP address using 'Manual Configuration'" />

        <TextBlock Grid.Row="5"
                   VerticalAlignment="Center"
                   HorizontalAlignment="Left">
            <Hyperlink><!--Click="HelpHyperlink_Click">-->
                <Hyperlink.Inlines>
                    <Run x:Uid="uidRemoteDebuggingHelpLink"
                         Text="Learn more about Docker Connections" />
                </Hyperlink.Inlines>
            </Hyperlink>
        </TextBlock>
    </Grid>
</ui:DialogWindow>
