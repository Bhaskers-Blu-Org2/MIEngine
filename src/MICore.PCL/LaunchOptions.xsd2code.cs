// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>LaunchOptions</NameSpace><Collection>Array</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace MICore.Xml.LaunchOptions {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    
    
    public partial class AndroidLaunchOptions {
        
        private string packageField;
        
        private string launchActivityField;
        
        private string sDKRootField;
        
        private string nDKRootField;
        
        private string intermediateDirectoryField;
        
        private string deviceIdField;
        
        private string logcatServiceIdField;
        
        private bool attachField;
        
        private TargetArchitecture targetArchitectureField;
        
        private string additionalSOLibSearchPathField;
        
        private MIMode mIModeField;
        
        private bool mIModeFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public AndroidLaunchOptions() {
            this.attachField = false;
        }
        
        public string Package {
            get {
                return this.packageField;
            }
            set {
                this.packageField = value;
            }
        }
        
        public string LaunchActivity {
            get {
                return this.launchActivityField;
            }
            set {
                this.launchActivityField = value;
            }
        }
        
        public string SDKRoot {
            get {
                return this.sDKRootField;
            }
            set {
                this.sDKRootField = value;
            }
        }
        
        public string NDKRoot {
            get {
                return this.nDKRootField;
            }
            set {
                this.nDKRootField = value;
            }
        }
        
        public string IntermediateDirectory {
            get {
                return this.intermediateDirectoryField;
            }
            set {
                this.intermediateDirectoryField = value;
            }
        }
        
        public string DeviceId {
            get {
                return this.deviceIdField;
            }
            set {
                this.deviceIdField = value;
            }
        }
        
        public string LogcatServiceId {
            get {
                return this.logcatServiceIdField;
            }
            set {
                this.logcatServiceIdField = value;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool Attach {
            get {
                return this.attachField;
            }
            set {
                this.attachField = value;
            }
        }
        
        public TargetArchitecture TargetArchitecture {
            get {
                return this.targetArchitectureField;
            }
            set {
                this.targetArchitectureField = value;
            }
        }
        
        public string AdditionalSOLibSearchPath {
            get {
                return this.additionalSOLibSearchPathField;
            }
            set {
                this.additionalSOLibSearchPathField = value;
            }
        }
        
        public MIMode MIMode {
            get {
                return this.mIModeField;
            }
            set {
                this.mIModeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MIModeSpecified {
            get {
                return this.mIModeFieldSpecified;
            }
            set {
                this.mIModeFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AndroidLaunchOptions));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AndroidLaunchOptions object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AndroidLaunchOptions object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AndroidLaunchOptions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AndroidLaunchOptions obj, out System.Exception exception) {
            exception = null;
            obj = default(AndroidLaunchOptions);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AndroidLaunchOptions obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AndroidLaunchOptions Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AndroidLaunchOptions)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AndroidLaunchOptions object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AndroidLaunchOptions object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AndroidLaunchOptions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AndroidLaunchOptions obj, out System.Exception exception) {
            exception = null;
            obj = default(AndroidLaunchOptions);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AndroidLaunchOptions obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AndroidLaunchOptions LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    public enum TargetArchitecture {
        
        /// <remarks/>
        x86,
        
        /// <remarks/>
        arm,
        
        /// <remarks/>
        arm64,
        
        /// <remarks/>
        mips,
        
        /// <remarks/>
        x64,
        
        /// <remarks/>
        amd64,
        
        /// <remarks/>
        x86_64,
        
        /// <remarks/>
        X86,
        
        /// <remarks/>
        ARM,
        
        /// <remarks/>
        ARM64,
        
        /// <remarks/>
        MIPS,
        
        /// <remarks/>
        X64,
        
        /// <remarks/>
        AMD64,
        
        /// <remarks/>
        X86_64,
    }
    
    public enum MIMode {
        
        /// <remarks/>
        gdb,
        
        /// <remarks/>
        lldb,
        
        /// <remarks/>
        clrdbg,
    }
    
    public partial class IOSLaunchOptions {
        
        private string remoteMachineNameField;
        
        private string packageIdField;
        
        private int vcremotePortField;
        
        private IOSLaunchOptionsIOSDebugTarget iOSDebugTargetField;
        
        private IOSLaunchOptionsSecure secureField;
        
        private TargetArchitecture targetArchitectureField;
        
        private string additionalSOLibSearchPathField;
        
        private MIMode mIModeField;
        
        private bool mIModeFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string RemoteMachineName {
            get {
                return this.remoteMachineNameField;
            }
            set {
                this.remoteMachineNameField = value;
            }
        }
        
        public string PackageId {
            get {
                return this.packageIdField;
            }
            set {
                this.packageIdField = value;
            }
        }
        
        public int vcremotePort {
            get {
                return this.vcremotePortField;
            }
            set {
                this.vcremotePortField = value;
            }
        }
        
        public IOSLaunchOptionsIOSDebugTarget IOSDebugTarget {
            get {
                return this.iOSDebugTargetField;
            }
            set {
                this.iOSDebugTargetField = value;
            }
        }
        
        public IOSLaunchOptionsSecure Secure {
            get {
                return this.secureField;
            }
            set {
                this.secureField = value;
            }
        }
        
        public TargetArchitecture TargetArchitecture {
            get {
                return this.targetArchitectureField;
            }
            set {
                this.targetArchitectureField = value;
            }
        }
        
        public string AdditionalSOLibSearchPath {
            get {
                return this.additionalSOLibSearchPathField;
            }
            set {
                this.additionalSOLibSearchPathField = value;
            }
        }
        
        public MIMode MIMode {
            get {
                return this.mIModeField;
            }
            set {
                this.mIModeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MIModeSpecified {
            get {
                return this.mIModeFieldSpecified;
            }
            set {
                this.mIModeFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IOSLaunchOptions));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IOSLaunchOptions object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an IOSLaunchOptions object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IOSLaunchOptions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IOSLaunchOptions obj, out System.Exception exception) {
            exception = null;
            obj = default(IOSLaunchOptions);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out IOSLaunchOptions obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static IOSLaunchOptions Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((IOSLaunchOptions)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current IOSLaunchOptions object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an IOSLaunchOptions object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IOSLaunchOptions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IOSLaunchOptions obj, out System.Exception exception) {
            exception = null;
            obj = default(IOSLaunchOptions);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out IOSLaunchOptions obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static IOSLaunchOptions LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    public enum IOSLaunchOptionsIOSDebugTarget {
        
        /// <remarks/>
        Device,
        
        /// <remarks/>
        Simulator,
    }
    
    public enum IOSLaunchOptionsSecure {
        
        /// <remarks/>
        True,
        
        /// <remarks/>
        False,
    }
    
    public partial class LocalLaunchOptions : BaseLaunchOptions {
        
        private string mIDebuggerPathField;
        
        private string mIDebuggerServerAddressField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string MIDebuggerPath {
            get {
                return this.mIDebuggerPathField;
            }
            set {
                this.mIDebuggerPathField = value;
            }
        }
        
        public string MIDebuggerServerAddress {
            get {
                return this.mIDebuggerServerAddressField;
            }
            set {
                this.mIDebuggerServerAddressField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LocalLaunchOptions));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Deserializes workflow markup into an LocalLaunchOptions object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LocalLaunchOptions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LocalLaunchOptions obj, out System.Exception exception) {
            exception = null;
            obj = default(LocalLaunchOptions);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LocalLaunchOptions obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static new LocalLaunchOptions Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LocalLaunchOptions)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an LocalLaunchOptions object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LocalLaunchOptions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LocalLaunchOptions obj, out System.Exception exception) {
            exception = null;
            obj = default(LocalLaunchOptions);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LocalLaunchOptions obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static new LocalLaunchOptions LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    public partial class BaseLaunchOptions {
        
        private Command[] setupCommandsField;
        
        private Command[] customLaunchSetupCommandsField;
        
        private BaseLaunchOptionsLaunchCompleteCommand launchCompleteCommandField;
        
        private bool launchCompleteCommandFieldSpecified;
        
        private string exePathField;
        
        private string exeArgumentsField;
        
        private string workingDirectoryField;
        
        private string visualizerFileField;
        
        private TargetArchitecture targetArchitectureField;
        
        private string additionalSOLibSearchPathField;
        
        private MIMode mIModeField;
        
        private bool mIModeFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Command[] SetupCommands {
            get {
                return this.setupCommandsField;
            }
            set {
                this.setupCommandsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Command[] CustomLaunchSetupCommands {
            get {
                return this.customLaunchSetupCommandsField;
            }
            set {
                this.customLaunchSetupCommandsField = value;
            }
        }
        
        public BaseLaunchOptionsLaunchCompleteCommand LaunchCompleteCommand {
            get {
                return this.launchCompleteCommandField;
            }
            set {
                this.launchCompleteCommandField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LaunchCompleteCommandSpecified {
            get {
                return this.launchCompleteCommandFieldSpecified;
            }
            set {
                this.launchCompleteCommandFieldSpecified = value;
            }
        }
        
        public string ExePath {
            get {
                return this.exePathField;
            }
            set {
                this.exePathField = value;
            }
        }
        
        public string ExeArguments {
            get {
                return this.exeArgumentsField;
            }
            set {
                this.exeArgumentsField = value;
            }
        }
        
        public string WorkingDirectory {
            get {
                return this.workingDirectoryField;
            }
            set {
                this.workingDirectoryField = value;
            }
        }
        
        public string VisualizerFile {
            get {
                return this.visualizerFileField;
            }
            set {
                this.visualizerFileField = value;
            }
        }
        
        public TargetArchitecture TargetArchitecture {
            get {
                return this.targetArchitectureField;
            }
            set {
                this.targetArchitectureField = value;
            }
        }
        
        public string AdditionalSOLibSearchPath {
            get {
                return this.additionalSOLibSearchPathField;
            }
            set {
                this.additionalSOLibSearchPathField = value;
            }
        }
        
        public MIMode MIMode {
            get {
                return this.mIModeField;
            }
            set {
                this.mIModeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MIModeSpecified {
            get {
                return this.mIModeFieldSpecified;
            }
            set {
                this.mIModeFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BaseLaunchOptions));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BaseLaunchOptions object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BaseLaunchOptions object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BaseLaunchOptions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BaseLaunchOptions obj, out System.Exception exception) {
            exception = null;
            obj = default(BaseLaunchOptions);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BaseLaunchOptions obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BaseLaunchOptions Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BaseLaunchOptions)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BaseLaunchOptions object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BaseLaunchOptions object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BaseLaunchOptions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out BaseLaunchOptions obj, out System.Exception exception) {
            exception = null;
            obj = default(BaseLaunchOptions);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BaseLaunchOptions obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BaseLaunchOptions LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    public partial class Command {
        
        private bool ignoreFailuresField;
        
        private bool ignoreFailuresFieldSpecified;
        
        private string descriptionField;
        
        private string valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public bool IgnoreFailures {
            get {
                return this.ignoreFailuresField;
            }
            set {
                this.ignoreFailuresField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IgnoreFailuresSpecified {
            get {
                return this.ignoreFailuresFieldSpecified;
            }
            set {
                this.ignoreFailuresFieldSpecified = value;
            }
        }
        
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Command));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Command object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Command object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Command object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Command obj, out System.Exception exception) {
            exception = null;
            obj = default(Command);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Command obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Command Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Command)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Command object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Command object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Command object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Command obj, out System.Exception exception) {
            exception = null;
            obj = default(Command);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Command obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Command LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    public enum BaseLaunchOptionsLaunchCompleteCommand {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("exec-run")]
        execrun,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("exec-continue")]
        execcontinue,
        
        /// <remarks/>
        None,
    }
    
    public partial class PipeLaunchOptions : BaseLaunchOptions {
        
        private string pipePathField;
        
        private string pipeArgumentsField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string PipePath {
            get {
                return this.pipePathField;
            }
            set {
                this.pipePathField = value;
            }
        }
        
        public string PipeArguments {
            get {
                return this.pipeArgumentsField;
            }
            set {
                this.pipeArgumentsField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PipeLaunchOptions));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Deserializes workflow markup into an PipeLaunchOptions object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PipeLaunchOptions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PipeLaunchOptions obj, out System.Exception exception) {
            exception = null;
            obj = default(PipeLaunchOptions);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PipeLaunchOptions obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static new PipeLaunchOptions Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PipeLaunchOptions)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PipeLaunchOptions object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PipeLaunchOptions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PipeLaunchOptions obj, out System.Exception exception) {
            exception = null;
            obj = default(PipeLaunchOptions);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PipeLaunchOptions obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static new PipeLaunchOptions LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    public partial class TcpLaunchOptions : BaseLaunchOptions {
        
        private string hostnameField;
        
        private int portField;
        
        private bool secureField;
        
        private bool secureFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string Hostname {
            get {
                return this.hostnameField;
            }
            set {
                this.hostnameField = value;
            }
        }
        
        public int Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        public bool Secure {
            get {
                return this.secureField;
            }
            set {
                this.secureField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SecureSpecified {
            get {
                return this.secureFieldSpecified;
            }
            set {
                this.secureFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TcpLaunchOptions));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TcpLaunchOptions object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public override string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TcpLaunchOptions object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TcpLaunchOptions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TcpLaunchOptions obj, out System.Exception exception) {
            exception = null;
            obj = default(TcpLaunchOptions);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TcpLaunchOptions obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static new TcpLaunchOptions Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TcpLaunchOptions)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TcpLaunchOptions object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TcpLaunchOptions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TcpLaunchOptions obj, out System.Exception exception) {
            exception = null;
            obj = default(TcpLaunchOptions);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TcpLaunchOptions obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static new TcpLaunchOptions LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    public partial class CommandList {
        
        private Command[] commandField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public Command[] Command {
            get {
                return this.commandField;
            }
            set {
                this.commandField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CommandList));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CommandList object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CommandList object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CommandList object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CommandList obj, out System.Exception exception) {
            exception = null;
            obj = default(CommandList);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CommandList obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CommandList Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CommandList)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CommandList object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CommandList object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CommandList object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CommandList obj, out System.Exception exception) {
            exception = null;
            obj = default(CommandList);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CommandList obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CommandList LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
